※ 프림(Prim) 알고리즘 (우선순위큐(힙) 사용)

1. 그래프의 임의의 정점을 시작 정점으로 선택하고, 최소신장트리의 루트로 삽입한다.
2. 삽입된 정점과 연결된 모든 인접 정점 사이에 있는 간선들의 가중치를 조사한다. 이 중 가장 작은 간선과 연결된 정점을 최소신장트리에 삽입한다. (Greedy)
(※ 주의 - 이때 정점을 삽입할 때, 기존 노드와 사이클을 형성해서는 안 된다.)
3. 2번과정을 모든 정점이 삽입될 때까지 반복한다.

최소신장트리에 사용할 수 있는 자료구조는 배열, 연결리스트, 트리, 그래프 등 다양하다.

하지만, 정점이 새로 추가될 때마다
	1. 그래프의 모든 정점을 순회하면서 각 정점이 최소신장트리에 추가됐는지 확인
	2. 최소신장트리에 추가된 모든 정보를 조사해서 최소 가중치를 갖는것을 찾아야 함.
= O(n^2)

따라서 새로운 노드를 삽입할 때마다 가중치에 따라 자동으로 정렬되며 삽입/삭제가 빠르고 최솟값을 O(1)에 찾을 수 있는 '우선순위 큐'를 사용하는 것이 가장 적절하다.
	- 인접행렬 방식으로 구현할 경우, 간단하게 구현할 수 있으나 시간복잡도 O(V²)
	- 인접리스트 방식으로 구현할 경우, 우선순위 큐를 사용해야 돼 코드량이 많아지고 복잡해지지만 시간복잡도 O(E*logV)
	



※ 다익스트라는
	1. 각 정점을 시작점으로해서 서로 다른 정점으로 도착할 때 소요되는 경로의 길이를 저장할 수 있는 2차원배열을 만들고 무한대로 초기화한다.
	2. 시작 정점의 경로길이를 0으로 초기화하고 최단경로에 추가한다.
	3. 최단경로에 새로 추가된 정점과 연결된 인접정점에 대해 경로길이를 최솟값으로 갱신한다.


다익스트라와 프림은 유사하지만 두 가지 차이점이 있다.
	1. 프림 알고리즘은 단순히 가중치(간선의 길이)로 어떤 간선을 먼저 연결할지 판단하지만, 다익스트라는 경로의 길이를 고려해서 간선을 연결함.
	2. 다익스트라는 사이클이 없는 방향성 그래프(DAG)에서만 사용할 수 있음.


※ 크루스칼(Cruskal) 알고리즘 (가중치 오름차순 정렬 및 분리집합 이용)

1. 입력된 그래프의 모든 간선을 가중치에 대해 오름차순으로 정렬한다. (Greedy)
2. 가중치가 낮은 간선부터 검사를 시작한다. 간선의 한쪽 끝(A)과 다른쪽 끝(B)이 서로 다른 집합에 속해있다면, 합집합 연산으로 같은 집합으로 만들어준다. (만일 두 정점이 같은 집합에 속해있다면, 그래프에 사이클이 형성돼있다는 뜻이므로 무시하고 다음 간선으로 넘어간다.)
3. 모든 정점이 하나의 집합에 모일 때까지 위 과정을 반복한다.
